//{ Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
// Back-end complete function Template for C++

class Solution{
public:
       void dfs(int s,int d,vector<int> adj[],vector<vector<int>>&ans)
      {  
        for(auto it:adj[s])
        {
            if(ans[d][it]==0)
            {
                ans[d][it]=1;
                dfs(it,d,adj,ans);
            }
        }
    }
    vector<vector<int>> transitiveClosure(int N, vector<vector<int>> graph)
    {
      vector<int>adj[N];
        for(int i=0;i<graph.size();i++)
        {
            for(int j=0;j<graph[i].size();j++)
            {
                if(graph[i][j]==1&&i!=j)
                  adj[i].push_back(j);
                
            }
        }
        vector<vector<int>>ans(N,vector<int>(N,0));
        for(int i=0;i<N;i++)
          ans[i][i]=1;
      
        for(int i=0;i<N;i++)
        {
           dfs(i,i,adj,ans);
        }
        return ans;
    }
};

//{ Driver Code Starts.

int main(){
    int t;
    cin>>t;
    while(t--){
        int N;
        cin>>N;
        vector<vector<int>> graph(N, vector<int>(N, -1));
        for(int i = 0;i < N;i++)
            for(int j=0;j<N;j++)
            cin>>graph[i][j];
        
        Solution ob;
        vector<vector<int>> ans = ob.transitiveClosure(N, graph);
        for(int i = 0;i < N;i++)
            {for(int j = 0;j < N;j++)
                cout<<ans[i][j]<<" ";
        cout<<"\n";}
    }
    return 0;
}
// } Driver Code Ends
